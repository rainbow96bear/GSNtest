{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldTarget",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newTarget",
						"type": "address"
					}
				],
				"name": "TargetChanged",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "CALLDATA_SIZE_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FORWARDER_HUB_OVERHEAD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PAYMASTER_ACCEPTANCE_BUDGET",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "POST_RELAYED_CALL_GAS_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PRE_RELAYED_CALL_GAS_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGasAndDataLimits",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "acceptanceBudget",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preRelayedCallGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "postRelayedCallGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "calldataSizeLimit",
								"type": "uint256"
							}
						],
						"internalType": "struct IPaymaster.GasAndDataLimits",
						"name": "limits",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRelayHub",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTrustedForwarder",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "gasUseWithoutPost",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "transactionCalldataGasUsed",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "relayWorker",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "paymaster",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "forwarder",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "paymasterData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "clientId",
								"type": "uint256"
							}
						],
						"internalType": "struct GsnTypes.RelayData",
						"name": "relayData",
						"type": "tuple"
					}
				],
				"name": "postRelayedCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "from",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "to",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "value",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "gas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "nonce",
										"type": "uint256"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									},
									{
										"internalType": "uint256",
										"name": "validUntilTime",
										"type": "uint256"
									}
								],
								"internalType": "struct IForwarder.ForwardRequest",
								"name": "request",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "maxFeePerGas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxPriorityFeePerGas",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "transactionCalldataGasUsed",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "relayWorker",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "paymaster",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "forwarder",
										"type": "address"
									},
									{
										"internalType": "bytes",
										"name": "paymasterData",
										"type": "bytes"
									},
									{
										"internalType": "uint256",
										"name": "clientId",
										"type": "uint256"
									}
								],
								"internalType": "struct GsnTypes.RelayData",
								"name": "relayData",
								"type": "tuple"
							}
						],
						"internalType": "struct GsnTypes.RelayRequest",
						"name": "relayRequest",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "approvalData",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "maxPossibleGas",
						"type": "uint256"
					}
				],
				"name": "preRelayedCall",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IRelayHub",
						"name": "hub",
						"type": "address"
					}
				],
				"name": "setRelayHub",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_target",
						"type": "address"
					}
				],
				"name": "setTarget",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					}
				],
				"name": "setTrustedForwarder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "target",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "versionPaymaster",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "target",
						"type": "address"
					}
				],
				"name": "withdrawRelayHubDepositTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getGasAndDataLimits()": {
					"returns": {
						"limits": "An instance of the `GasAndDataLimits` struct ##### `acceptanceBudget` If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what. Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense. Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request. This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract. :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit` (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions. If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \"griefing\" attack. The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated. From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay, since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts. Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config). ##### `preRelayedCallGasLimit` The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster. As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster. ##### `postRelayedCallGasLimit` The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas. Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway."
					}
				},
				"getRelayHub()": {
					"returns": {
						"_0": "The address of the `RelayHub` that is trusted by this Paymaster to execute the requests."
					}
				},
				"getTrustedForwarder()": {
					"returns": {
						"_0": "The address of the `Forwarder` that is trusted by this Paymaster to execute the requests."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
					"params": {
						"context": "The call context, as returned by the preRelayedCall",
						"gasUseWithoutPost": "The actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.",
						"relayData": "The relay params of the request. can be used by relayHub.calculateCharge()",
						"success": "`true` if the relayed call succeeded, false if it reverted"
					}
				},
				"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
					"params": {
						"approvalData": "- extra dapp-specific data (e.g. signature from trusted party)",
						"maxPossibleGas": "- based on values returned from `getGasAndDataLimits` the RelayHub will calculate the maximum possible amount of gas the user may be charged for. In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"",
						"relayRequest": "- the full relay request structure",
						"signature": "- user's EIP712-compatible signature of the `relayRequest`. Note that in most cases the paymaster shouldn't try use it at all. It is always checked by the forwarder immediately after preRelayedCall returns."
					},
					"returns": {
						"_0": "A byte array to be passed to postRelayedCall. Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.",
						"_1": "The flag that allows a Paymaster to \"delegate\" the rejection to the recipient code. It also means the Paymaster trust the recipient to reject fast: both preRelayedCall, forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget, otherwise the TX is paid by the Paymaster. `true` if the Paymaster wants to reject the TX if the recipient reverts. `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"versionPaymaster()": {
					"returns": {
						"_0": "version The SemVer string of this Paymaster's version."
					}
				},
				"withdrawRelayHubDepositTo(uint256,address)": {
					"params": {
						"amount": "The amount to be subtracted from the sender.",
						"target": "The target to which the amount will be transferred."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getGasAndDataLimits()": {
					"notice": "Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub."
				},
				"getTrustedForwarder()": {
					"notice": ":warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions."
				},
				"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
					"notice": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction."
				},
				"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
					"notice": "Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that the Paymaster agrees to pay for this call. The request is considered to be rejected by the Paymaster in one of the following conditions:  - `preRelayedCall()` method reverts  - the `Forwarder` reverts because of nonce or signature error  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted    (and all that did not consume more than `acceptanceBudget` gas). In any of the above cases, all Paymaster calls and the recipient call are reverted. In any other case the Paymaster will pay for the gas cost of the transaction. Note that even if `postRelayedCall` is reverted the Paymaster will be charged."
				},
				"setRelayHub(address)": {
					"notice": "The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first."
				},
				"setTrustedForwarder(address)": {
					"notice": "The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional."
				},
				"withdrawRelayHubDepositTo(uint256,address)": {
					"notice": "Withdraw deposit from the RelayHub."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"testSinglePaymaster.sol": "TestSinglePaymaster"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@opengsn/contracts/src/BasePaymaster.sol": {
			"keccak256": "0xcd6a501e35d31a1732c1c1bcdd8d32e7f4ddbd4018dcbde4db7220efa4ec3e13",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://c7bef1e3eca3aed75fd75f84d8cd833c95784ac19039fd4e0d9dd4920997db0c",
				"dweb:/ipfs/QmV4TLSwoJudW2g65GcqWFWxErXNUryZLgDDN4SfqJEttR"
			]
		},
		"@opengsn/contracts/src/forwarder/IForwarder.sol": {
			"keccak256": "0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://a21d3f5fb9861fecd89da8aab73fc458e48bdfd2d7d9fd8a2f05b1afe54de278",
				"dweb:/ipfs/QmcNDQsr83ASBADBQmqdrvSvRt81rhUmyJwSVTu5is7WzW"
			]
		},
		"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol": {
			"keccak256": "0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170",
			"license": "MIT",
			"urls": [
				"bzz-raw://68680e24b98e554eb64e724a6ddab30827d5091ae36812e2a4e1b1914481ca4c",
				"dweb:/ipfs/QmR9TVoucNzaeiAgSu1miqoQ4SZAcMCB2yRd32YuEXVWLB"
			]
		},
		"@opengsn/contracts/src/interfaces/IPaymaster.sol": {
			"keccak256": "0xeedb6d83ce600a97a4abbb614d24c65cb2ebc06a1784cc6a81afa9233d1331b6",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://7af72857038fbde9546d54e8dc45d0ee66546e7c4bdbb075be9f34597864717e",
				"dweb:/ipfs/QmTmPEMGzU4aar8WsAGyhNZQDyX9Gjqnj8f4kfRqKeiG5e"
			]
		},
		"@opengsn/contracts/src/interfaces/IRelayHub.sol": {
			"keccak256": "0x0ab29ca5985c98f530e5985e3d9dd14f00d34527410ce980b51b26e57bb0121c",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://a3b2293fd227e1e064209b5b0320b390ae4ffb8595ac58b63cf21a73a0421e44",
				"dweb:/ipfs/QmfXKdfJFViWKc5s36sikQdCU4VBCz1NJKdQc4yBAVm6WT"
			]
		},
		"@opengsn/contracts/src/interfaces/IStakeManager.sol": {
			"keccak256": "0x77035b55ca4c09cb499bc0cab3f9e791d77597b148dbfee8bf94ca6c0039c3e0",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://e96ac3b5f47ddf73ab81b2db2b8ff06e25290b77ddcf37a06eb0eb1a33363a0b",
				"dweb:/ipfs/QmUFdy86xMmPMj2yM2h621sRgBMkjQKxh1a1J7F8nSYBsh"
			]
		},
		"@opengsn/contracts/src/utils/GsnEip712Library.sol": {
			"keccak256": "0x73b5828c2578aea26dbd21cea00f1a245c94f9720ffd95932777ee6121e31972",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://d16a881d561dd02890857cd2e83f24b3ef2c5ad393d6310afb834e99190a4c27",
				"dweb:/ipfs/QmZD6C9HSPHYGGeUdNEpAKY5Fydt9Kt73mTvwAjEhiLgDa"
			]
		},
		"@opengsn/contracts/src/utils/GsnTypes.sol": {
			"keccak256": "0x9fb51c540f32939f1ee291e3fa709be64f7c73485bd7b87c6624c3567dd42a1b",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://b06d239476b0340ef1819c6c16c3995fe0be30c78c6bc3fc7a8382721fc546e7",
				"dweb:/ipfs/QmYqu6qmhNPEL1EK9Hxqy1bdqnxscKvK2evaP5UhehFFKX"
			]
		},
		"@opengsn/contracts/src/utils/GsnUtils.sol": {
			"keccak256": "0x7ea79bac2508612eba2c9372a7a4af953218b4ee2721e273f6d368e76b1ae7bb",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://e9fb5dc63a5adf3f97665f6ac4b3d22e87838a8994f4cb074333492fcb212cf7",
				"dweb:/ipfs/QmRSYWkxLUFoHqZbBERGEDStv3d3jNXwpAxvhUrkNQ6a6d"
			]
		},
		"@opengsn/contracts/src/utils/MinLibBytes.sol": {
			"keccak256": "0x8063af8e0f134be3d794ad39bdc0041f33a16c91a4ee7abb968d4c15c8d10c54",
			"license": "MIT",
			"urls": [
				"bzz-raw://c56adf5ddc717546e922b5f0cdb1d2bf084b070d2256b684a746d535cefdfa23",
				"dweb:/ipfs/QmbGgdbkpg4fz79c8tgKFJB4afXHRYgL3iMRf9KBQSVkWu"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
				"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f7bb74cf88fd88daa34e118bc6e363381d05044f34f391d39a10c0c9dac3ebd",
				"dweb:/ipfs/QmNbQ3v8v4zuDtg7VeLAbdhAm3tCzUodNoDZZ8ekmCHWZX"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"testSinglePaymaster.sol": {
			"keccak256": "0xdb5d50db511bb4538eb2d112b61e30eef39b1f69602ad4dc98ad553b8b9de864",
			"license": "MIT",
			"urls": [
				"bzz-raw://6668292d4da8008f94a16044f85b8c3ca89df29a5b472e05d70414c2a0107950",
				"dweb:/ipfs/QmcNWTwyxHxtVeEEhZyx79iR9orDXw9nFKecqBTf8DcYqN"
			]
		}
	},
	"version": 1
}